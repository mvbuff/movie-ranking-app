// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
}

enum ActivityType {
  MOVIE_ADDED
  MOVIE_RATED
  REVIEW_ADDED
  REVIEW_LIKED
  FORUM_THREAD_CREATED
  FORUM_POST_ADDED
  USER_REGISTERED
}

model User {
  id                 String              @id @default(cuid())
  name               String              @unique
  password           String?
  role               UserRole            @default(USER)
  status             UserStatus          @default(PENDING)
  passwordResetRequired Boolean          @default(false)
  email              String?             @unique
  image              String?
  createdAt          DateTime            @default(now())
  ratings            Rating[]
  weightPreferences  WeightPreference[]  @relation("WeightSetter")
  weightsAboutMe     WeightPreference[]  @relation("WeightedFriend")
  ownedFriendGroups  FriendGroup[]
  groupMemberships   FriendGroupMember[]
  aggregateScores    AggregateScore[]
  reviews            Review[]
  addedMovies        Movie[]             @relation("MovieAddedBy")
  watchlist          Watchlist[]
  forumThreads       ForumThread[]
  forumPosts         ForumPost[]
  reviewLikes        ReviewLike[]
  activities         Activity[]
}

enum Category {
  MOVIE
  SERIES
  DOCUMENTARY
}

model Movie {
  id              String           @id @default(cuid())
  title           String
  year            Int
  posterUrl       String?
  tmdbId          String           @unique
  tmdbRating      Float?
  tmdbVoteCount   Int?
  category        Category         @default(MOVIE)
  addedBy         User?            @relation("MovieAddedBy", fields: [addedById], references: [id])
  addedById       String?
  createdAt       DateTime         @default(now())
  ratings         Rating[]
  aggregateScores AggregateScore[]
  reviews         Review[]
  watchlist       Watchlist[]
  forumCategories ForumCategory[]
}

model Rating {
  id      String @id @default(cuid())
  score   Float
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId String

  @@unique([userId, movieId])
}

model WeightPreference {
  id       String @id @default(cuid())
  weight   Float  @default(1.0)
  user     User   @relation("WeightSetter", fields: [userId], references: [id])
  userId   String
  friend   User   @relation("WeightedFriend", fields: [friendId], references: [id])
  friendId String

  @@unique([userId, friendId])
}

model FriendGroup {
  id      String              @id @default(cuid())
  name    String
  owner   User                @relation(fields: [ownerId], references: [id])
  ownerId String
  members FriendGroupMember[]
}

model FriendGroupMember {
  id      String      @id @default(cuid())
  group   FriendGroup @relation(fields: [groupId], references: [id])
  groupId String
  member  User        @relation(fields: [memberId], references: [id])
  memberId String

  @@unique([groupId, memberId])
}

model AggregateScore {
  id         String   @id @default(cuid())
  score      Float
  confidence Float?
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  movie      Movie    @relation(fields: [movieId], references: [id])
  movieId    String

  @@unique([userId, movieId])
}

model Review {
  id        String   @id @default(cuid())
  text      String   @db.VarChar(100)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   String
  likes     ReviewLike[]
}

model ReviewLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  String

  @@unique([userId, reviewId])
}

model Watchlist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   String

  @@unique([userId, movieId])
}

model ForumCategory {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  color       String?       // For UI theming
  isMovieLink Boolean       @default(false) // True if category is linked to a specific movie
  movieId     String?       // Optional link to specific movie
  movie       Movie?        @relation(fields: [movieId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  threads     ForumThread[]
}

model ForumThread {
  id          String        @id @default(cuid())
  title       String
  isSticky    Boolean       @default(false) // Pinned threads
  isLocked    Boolean       @default(false) // Prevent new replies
  views       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relationships
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  category    ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  posts       ForumPost[]
}

model ForumPost {
  id          String      @id @default(cuid())
  content     String      @db.Text
  isFirstPost Boolean     @default(false) // True for the original thread post
  likes       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relationships
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  thread      ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId    String
  
  // Reply system
  parentPost  ForumPost?  @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  replies     ForumPost[] @relation("PostReplies")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String       // Human-readable description of the activity
  createdAt   DateTime     @default(now())
  
  // User who performed the activity
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  
  // Optional references to related objects
  movieId     String?      // For movie-related activities
  reviewId    String?      // For review-related activities  
  threadId    String?      // For forum thread activities
  postId      String?      // For forum post activities
  
  // Additional metadata as JSON (for extensibility)
  metadata    Json?
  
  @@index([createdAt(sort: Desc)]) // For efficient sorting by latest
  @@index([userId])                // For user-specific queries
  @@index([type])                  // For filtering by activity type
}
