// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  PENDING
  ACTIVE
}

model User {
  id                 String              @id @default(cuid())
  name               String              @unique
  password           String?
  role               UserRole            @default(USER)
  status             UserStatus          @default(PENDING)
  passwordResetRequired Boolean          @default(false)
  email              String?             @unique
  image              String?
  createdAt          DateTime            @default(now())
  ratings            Rating[]
  weightPreferences  WeightPreference[]  @relation("WeightSetter")
  weightsAboutMe     WeightPreference[]  @relation("WeightedFriend")
  ownedFriendGroups  FriendGroup[]
  groupMemberships   FriendGroupMember[]
  aggregateScores    AggregateScore[]
  reviews            Review[]
  addedMovies        Movie[]             @relation("MovieAddedBy")
}

enum Category {
  MOVIE
  SERIES
  DOCUMENTARY
}

model Movie {
  id              String           @id @default(cuid())
  title           String
  year            Int
  posterUrl       String?
  tmdbId          String           @unique
  tmdbRating      Float?
  tmdbVoteCount   Int?
  category        Category         @default(MOVIE)
  addedBy         User?            @relation("MovieAddedBy", fields: [addedById], references: [id])
  addedById       String?
  createdAt       DateTime         @default(now())
  ratings         Rating[]
  aggregateScores AggregateScore[]
  reviews         Review[]
}

model Rating {
  id      String @id @default(cuid())
  score   Float
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId String

  @@unique([userId, movieId])
}

model WeightPreference {
  id       String @id @default(cuid())
  weight   Float  @default(1.0)
  user     User   @relation("WeightSetter", fields: [userId], references: [id])
  userId   String
  friend   User   @relation("WeightedFriend", fields: [friendId], references: [id])
  friendId String

  @@unique([userId, friendId])
}

model FriendGroup {
  id      String              @id @default(cuid())
  name    String
  owner   User                @relation(fields: [ownerId], references: [id])
  ownerId String
  members FriendGroupMember[]
}

model FriendGroupMember {
  id      String      @id @default(cuid())
  group   FriendGroup @relation(fields: [groupId], references: [id])
  groupId String
  member  User        @relation(fields: [memberId], references: [id])
  memberId String

  @@unique([groupId, memberId])
}

model AggregateScore {
  id         String   @id @default(cuid())
  score      Float
  confidence Float?
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  movie      Movie    @relation(fields: [movieId], references: [id])
  movieId    String

  @@unique([userId, movieId])
}

model Review {
  id        String   @id @default(cuid())
  text      String   @db.VarChar(100)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   String
}
